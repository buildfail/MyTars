// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __ASERVANT_H_
#define __ASERVANT_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace TarsTest
{
    struct ServiceState : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "TarsTest.ServiceState";
        }
        static string MD5()
        {
            return "7256bb7978aa7eabbfbbd12c8ba7d7fe";
        }
        ServiceState()
        :time_interval_s(-1),succ_count(-1),total_time_ms(-1),timeout_count(-1),except_count(-1)
        {
        }
        void resetDefautlt()
        {
            time_interval_s = -1;
            succ_count = -1;
            total_time_ms = -1;
            timeout_count = -1;
            except_count = -1;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(time_interval_s, 0);
            _os.write(succ_count, 1);
            _os.write(total_time_ms, 2);
            _os.write(timeout_count, 3);
            _os.write(except_count, 4);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(time_interval_s, 0, true);
            _is.read(succ_count, 1, true);
            _is.read(total_time_ms, 2, true);
            _is.read(timeout_count, 3, true);
            _is.read(except_count, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(time_interval_s,"time_interval_s");
            _ds.display(succ_count,"succ_count");
            _ds.display(total_time_ms,"total_time_ms");
            _ds.display(timeout_count,"timeout_count");
            _ds.display(except_count,"except_count");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(time_interval_s, true);
            _ds.displaySimple(succ_count, true);
            _ds.displaySimple(total_time_ms, true);
            _ds.displaySimple(timeout_count, true);
            _ds.displaySimple(except_count, false);
            return _os;
        }
    public:
        tars::Int32 time_interval_s;
        tars::Int32 succ_count;
        tars::Int32 total_time_ms;
        tars::Int32 timeout_count;
        tars::Int32 except_count;
    };
    inline bool operator==(const ServiceState&l, const ServiceState&r)
    {
        return l.time_interval_s == r.time_interval_s && l.succ_count == r.succ_count && l.total_time_ms == r.total_time_ms && l.timeout_count == r.timeout_count && l.except_count == r.except_count;
    }
    inline bool operator!=(const ServiceState&l, const ServiceState&r)
    {
        return !(l == r);
    }

    struct ReqInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "TarsTest.ReqInfo";
        }
        static string MD5()
        {
            return "81f081ae089d5eb2cfdbe064a0db6ab5";
        }
        ReqInfo()
        :sServerName(""),sDate(""),sStartTime(""),sEndTime(""),uInterval(0)
        {
        }
        void resetDefautlt()
        {
            sServerName = "";
            sDate = "";
            sStartTime = "";
            sEndTime = "";
            uInterval = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(sServerName, 0);
            _os.write(sDate, 1);
            _os.write(sStartTime, 2);
            _os.write(sEndTime, 3);
            _os.write(uInterval, 4);
            _os.write(vIpList, 5);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sServerName, 0, true);
            _is.read(sDate, 1, true);
            _is.read(sStartTime, 2, true);
            _is.read(sEndTime, 3, true);
            _is.read(uInterval, 4, true);
            _is.read(vIpList, 5, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(sServerName,"sServerName");
            _ds.display(sDate,"sDate");
            _ds.display(sStartTime,"sStartTime");
            _ds.display(sEndTime,"sEndTime");
            _ds.display(uInterval,"uInterval");
            _ds.display(vIpList,"vIpList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(sServerName, true);
            _ds.displaySimple(sDate, true);
            _ds.displaySimple(sStartTime, true);
            _ds.displaySimple(sEndTime, true);
            _ds.displaySimple(uInterval, true);
            _ds.displaySimple(vIpList, false);
            return _os;
        }
    public:
        std::string sServerName;
        std::string sDate;
        std::string sStartTime;
        std::string sEndTime;
        tars::Int64 uInterval;
        vector<std::string> vIpList;
    };
    inline bool operator==(const ReqInfo&l, const ReqInfo&r)
    {
        return l.sServerName == r.sServerName && l.sDate == r.sDate && l.sStartTime == r.sStartTime && l.sEndTime == r.sEndTime && l.uInterval == r.uInterval && l.vIpList == r.vIpList;
    }
    inline bool operator!=(const ReqInfo&l, const ReqInfo&r)
    {
        return !(l == r);
    }

    struct RspInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "TarsTest.RspInfo";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        RspInfo()
        :sSlaveName(""),sMasterIp(""),sStartTime(""),sEndTime("")
        {
        }
        void resetDefautlt()
        {
            sSlaveName = "";
            sMasterIp = "";
            sStartTime = "";
            sEndTime = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(sSlaveName, 0);
            _os.write(sMasterIp, 1);
            _os.write(sStartTime, 2);
            _os.write(sEndTime, 3);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sSlaveName, 0, true);
            _is.read(sMasterIp, 1, true);
            _is.read(sStartTime, 2, true);
            _is.read(sEndTime, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(sSlaveName,"sSlaveName");
            _ds.display(sMasterIp,"sMasterIp");
            _ds.display(sStartTime,"sStartTime");
            _ds.display(sEndTime,"sEndTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(sSlaveName, true);
            _ds.displaySimple(sMasterIp, true);
            _ds.displaySimple(sStartTime, true);
            _ds.displaySimple(sEndTime, false);
            return _os;
        }
    public:
        std::string sSlaveName;
        std::string sMasterIp;
        std::string sStartTime;
        std::string sEndTime;
    };
    inline bool operator==(const RspInfo&l, const RspInfo&r)
    {
        return l.sSlaveName == r.sSlaveName && l.sMasterIp == r.sMasterIp && l.sStartTime == r.sStartTime && l.sEndTime == r.sEndTime;
    }
    inline bool operator!=(const RspInfo&l, const RspInfo&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class AServantPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~AServantPrxCallback(){}
        virtual void callback_queryTest(tars::Int32 ret,  const vector<TarsTest::RspInfo>& vRsp)
        { throw std::runtime_error("callback_queryTest() override incorrect."); }
        virtual void callback_queryTest_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_queryTest_exception() override incorrect."); }

        virtual void callback_saySomething(tars::Int32 ret,  const std::string& strOut)
        { throw std::runtime_error("callback_saySomething() override incorrect."); }
        virtual void callback_saySomething_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_saySomething_exception() override incorrect."); }

        virtual void callback_test(tars::Int32 ret)
        { throw std::runtime_error("callback_test() override incorrect."); }
        virtual void callback_test_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_test_exception() override incorrect."); }

        virtual void callback_testHello(tars::Int32 ret,  const std::string& sRsp)
        { throw std::runtime_error("callback_testHello() override incorrect."); }
        virtual void callback_testHello_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_testHello_exception() override incorrect."); }

        virtual void callback_testInt(tars::Int32 ret, tars::Int32 iOut)
        { throw std::runtime_error("callback_testInt() override incorrect."); }
        virtual void callback_testInt_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_testInt_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __AServant_all[]=
            {
                "queryTest",
                "saySomething",
                "test",
                "testHello",
                "testInt"
            };
            pair<string*, string*> r = equal_range(__AServant_all, __AServant_all+5, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __AServant_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_queryTest_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<TarsTest::RspInfo> vRsp;
                    _is.read(vRsp, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_queryTest(_ret, vRsp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_saySomething_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string strOut;
                    _is.read(strOut, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_saySomething(_ret, strOut);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_test_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_test(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_testHello_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string sRsp;
                    _is.read(sRsp, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_testHello(_ret, sRsp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_testInt_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    tars::Int32 iOut;
                    _is.read(iOut, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_testInt(_ret, iOut);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<AServantPrxCallback> AServantPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class AServantPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~AServantPrxCallbackPromise(){}
    public:
        struct PromisequeryTest: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<TarsTest::RspInfo> vRsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< AServantPrxCallbackPromise::PromisequeryTest > PromisequeryTestPtr;

        AServantPrxCallbackPromise(const promise::Promise< AServantPrxCallbackPromise::PromisequeryTestPtr > &promise)
        : _promise_queryTest(promise)
        {}
        
        virtual void callback_queryTest(const AServantPrxCallbackPromise::PromisequeryTestPtr &ptr)
        {
            _promise_queryTest.setValue(ptr);
        }
        virtual void callback_queryTest_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:queryTest_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_queryTest.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< AServantPrxCallbackPromise::PromisequeryTestPtr > _promise_queryTest;

    public:
        struct PromisesaySomething: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string strOut;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< AServantPrxCallbackPromise::PromisesaySomething > PromisesaySomethingPtr;

        AServantPrxCallbackPromise(const promise::Promise< AServantPrxCallbackPromise::PromisesaySomethingPtr > &promise)
        : _promise_saySomething(promise)
        {}
        
        virtual void callback_saySomething(const AServantPrxCallbackPromise::PromisesaySomethingPtr &ptr)
        {
            _promise_saySomething.setValue(ptr);
        }
        virtual void callback_saySomething_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:saySomething_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_saySomething.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< AServantPrxCallbackPromise::PromisesaySomethingPtr > _promise_saySomething;

    public:
        struct Promisetest: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< AServantPrxCallbackPromise::Promisetest > PromisetestPtr;

        AServantPrxCallbackPromise(const promise::Promise< AServantPrxCallbackPromise::PromisetestPtr > &promise)
        : _promise_test(promise)
        {}
        
        virtual void callback_test(const AServantPrxCallbackPromise::PromisetestPtr &ptr)
        {
            _promise_test.setValue(ptr);
        }
        virtual void callback_test_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:test_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_test.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< AServantPrxCallbackPromise::PromisetestPtr > _promise_test;

    public:
        struct PromisetestHello: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string sRsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< AServantPrxCallbackPromise::PromisetestHello > PromisetestHelloPtr;

        AServantPrxCallbackPromise(const promise::Promise< AServantPrxCallbackPromise::PromisetestHelloPtr > &promise)
        : _promise_testHello(promise)
        {}
        
        virtual void callback_testHello(const AServantPrxCallbackPromise::PromisetestHelloPtr &ptr)
        {
            _promise_testHello.setValue(ptr);
        }
        virtual void callback_testHello_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:testHello_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_testHello.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< AServantPrxCallbackPromise::PromisetestHelloPtr > _promise_testHello;

    public:
        struct PromisetestInt: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            tars::Int32 iOut;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< AServantPrxCallbackPromise::PromisetestInt > PromisetestIntPtr;

        AServantPrxCallbackPromise(const promise::Promise< AServantPrxCallbackPromise::PromisetestIntPtr > &promise)
        : _promise_testInt(promise)
        {}
        
        virtual void callback_testInt(const AServantPrxCallbackPromise::PromisetestIntPtr &ptr)
        {
            _promise_testInt.setValue(ptr);
        }
        virtual void callback_testInt_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:testInt_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_testInt.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< AServantPrxCallbackPromise::PromisetestIntPtr > _promise_testInt;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __AServant_all[]=
            {
                "queryTest",
                "saySomething",
                "test",
                "testHello",
                "testInt"
            };

            pair<string*, string*> r = equal_range(__AServant_all, __AServant_all+5, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __AServant_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_queryTest_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    AServantPrxCallbackPromise::PromisequeryTestPtr ptr = new AServantPrxCallbackPromise::PromisequeryTest();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->vRsp, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_queryTest_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_queryTest_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_queryTest(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_saySomething_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    AServantPrxCallbackPromise::PromisesaySomethingPtr ptr = new AServantPrxCallbackPromise::PromisesaySomething();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->strOut, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_saySomething_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_saySomething_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_saySomething(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_test_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    AServantPrxCallbackPromise::PromisetestPtr ptr = new AServantPrxCallbackPromise::Promisetest();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_test(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_testHello_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    AServantPrxCallbackPromise::PromisetestHelloPtr ptr = new AServantPrxCallbackPromise::PromisetestHello();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->sRsp, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_testHello_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_testHello_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_testHello(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_testInt_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    AServantPrxCallbackPromise::PromisetestIntPtr ptr = new AServantPrxCallbackPromise::PromisetestInt();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->iOut, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_testInt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_testInt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_testInt(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<AServantPrxCallbackPromise> AServantPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class AServantCoroPrxCallback: public AServantPrxCallback
    {
    public:
        virtual ~AServantCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __AServant_all[]=
            {
                "queryTest",
                "saySomething",
                "test",
                "testHello",
                "testInt"
            };

            pair<string*, string*> r = equal_range(__AServant_all, __AServant_all+5, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __AServant_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_queryTest_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<TarsTest::RspInfo> vRsp;
                        _is.read(vRsp, 2, true);
                        setResponseContext(msg->response.context);

                        callback_queryTest(_ret, vRsp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_queryTest_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_queryTest_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_saySomething_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string strOut;
                        _is.read(strOut, 2, true);
                        setResponseContext(msg->response.context);

                        callback_saySomething(_ret, strOut);

                    }
                    catch(std::exception &ex)
                    {
                        callback_saySomething_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_saySomething_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_test_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_test(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_testHello_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string sRsp;
                        _is.read(sRsp, 2, true);
                        setResponseContext(msg->response.context);

                        callback_testHello(_ret, sRsp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_testHello_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_testHello_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_testInt_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        tars::Int32 iOut;
                        _is.read(iOut, 2, true);
                        setResponseContext(msg->response.context);

                        callback_testInt(_ret, iOut);

                    }
                    catch(std::exception &ex)
                    {
                        callback_testInt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_testInt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<AServantCoroPrxCallback> AServantCoroPrxCallbackPtr;

    /* proxy for client */
    class AServantProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        tars::Int32 queryTest(const TarsTest::ReqInfo & req,vector<TarsTest::RspInfo> &vRsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            _os.write(vRsp, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"queryTest", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(vRsp, 2, true);
            return _ret;
        }

        void async_queryTest(AServantPrxCallbackPtr callback,const TarsTest::ReqInfo &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"queryTest", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< AServantPrxCallbackPromise::PromisequeryTestPtr > promise_async_queryTest(const TarsTest::ReqInfo &req,const map<string, string>& context)
        {
            promise::Promise< AServantPrxCallbackPromise::PromisequeryTestPtr > promise;
            AServantPrxCallbackPromisePtr callback = new AServantPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"queryTest", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_queryTest(AServantCoroPrxCallbackPtr callback,const TarsTest::ReqInfo &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"queryTest", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 saySomething(const std::string & something,std::string &strOut,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(something, 1);
            _os.write(strOut, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"saySomething", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(strOut, 2, true);
            return _ret;
        }

        void async_saySomething(AServantPrxCallbackPtr callback,const std::string &something,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(something, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"saySomething", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< AServantPrxCallbackPromise::PromisesaySomethingPtr > promise_async_saySomething(const std::string &something,const map<string, string>& context)
        {
            promise::Promise< AServantPrxCallbackPromise::PromisesaySomethingPtr > promise;
            AServantPrxCallbackPromisePtr callback = new AServantPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(something, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"saySomething", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_saySomething(AServantCoroPrxCallbackPtr callback,const std::string &something,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(something, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"saySomething", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 test(const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_test(AServantPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< AServantPrxCallbackPromise::PromisetestPtr > promise_async_test(const map<string, string>& context)
        {
            promise::Promise< AServantPrxCallbackPromise::PromisetestPtr > promise;
            AServantPrxCallbackPromisePtr callback = new AServantPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_test(AServantCoroPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 testHello(const std::string & sReq,std::string &sRsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(sReq, 1);
            _os.write(sRsp, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"testHello", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(sRsp, 2, true);
            return _ret;
        }

        void async_testHello(AServantPrxCallbackPtr callback,const std::string &sReq,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(sReq, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"testHello", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< AServantPrxCallbackPromise::PromisetestHelloPtr > promise_async_testHello(const std::string &sReq,const map<string, string>& context)
        {
            promise::Promise< AServantPrxCallbackPromise::PromisetestHelloPtr > promise;
            AServantPrxCallbackPromisePtr callback = new AServantPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(sReq, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"testHello", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_testHello(AServantCoroPrxCallbackPtr callback,const std::string &sReq,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(sReq, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"testHello", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 testInt(tars::Int32 iIn,tars::Int32 &iOut,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(iIn, 1);
            _os.write(iOut, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"testInt", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(iOut, 2, true);
            return _ret;
        }

        void async_testInt(AServantPrxCallbackPtr callback,tars::Int32 iIn,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(iIn, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"testInt", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< AServantPrxCallbackPromise::PromisetestIntPtr > promise_async_testInt(tars::Int32 iIn,const map<string, string>& context)
        {
            promise::Promise< AServantPrxCallbackPromise::PromisetestIntPtr > promise;
            AServantPrxCallbackPromisePtr callback = new AServantPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(iIn, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"testInt", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_testInt(AServantCoroPrxCallbackPtr callback,tars::Int32 iIn,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(iIn, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"testInt", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        AServantProxy* tars_hash(int64_t key)
        {
            return (AServantProxy*)ServantProxy::tars_hash(key);
        }

        AServantProxy* tars_consistent_hash(int64_t key)
        {
            return (AServantProxy*)ServantProxy::tars_consistent_hash(key);
        }

        AServantProxy* tars_set_timeout(int msecond)
        {
            return (AServantProxy*)ServantProxy::tars_set_timeout(msecond);
        }

    };
    typedef tars::TC_AutoPtr<AServantProxy> AServantPrx;

    /* servant for server */
    class AServant : public tars::Servant
    {
    public:
        virtual ~AServant(){}
        virtual tars::Int32 queryTest(const TarsTest::ReqInfo & req,vector<TarsTest::RspInfo> &vRsp,tars::TarsCurrentPtr current) = 0;
        static void async_response_queryTest(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<TarsTest::RspInfo> &vRsp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("vRsp", vRsp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(vRsp, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 saySomething(const std::string & something,std::string &strOut,tars::TarsCurrentPtr current) = 0;
        static void async_response_saySomething(tars::TarsCurrentPtr current, tars::Int32 _ret, const std::string &strOut)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("strOut", strOut);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(strOut, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 test(tars::TarsCurrentPtr current) = 0;
        static void async_response_test(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 testHello(const std::string & sReq,std::string &sRsp,tars::TarsCurrentPtr current) = 0;
        static void async_response_testHello(tars::TarsCurrentPtr current, tars::Int32 _ret, const std::string &sRsp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("sRsp", sRsp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(sRsp, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 testInt(tars::Int32 iIn,tars::Int32 &iOut,tars::TarsCurrentPtr current) = 0;
        static void async_response_testInt(tars::TarsCurrentPtr current, tars::Int32 _ret, tars::Int32 iOut)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("iOut", iOut);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(iOut, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __TarsTest__AServant_all[]=
            {
                "queryTest",
                "saySomething",
                "test",
                "testHello",
                "testInt"
            };

            pair<string*, string*> r = equal_range(__TarsTest__AServant_all, __TarsTest__AServant_all+5, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __TarsTest__AServant_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    TarsTest::ReqInfo req;
                    vector<TarsTest::RspInfo> vRsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("req", req);
                        tarsAttr.getByDefault("vRsp", vRsp, vRsp);
                    }
                    else
                    {
                        _is.read(req, 1, true);
                        _is.read(vRsp, 2, false);
                    }
                    tars::Int32 _ret = queryTest(req,vRsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("vRsp", vRsp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(vRsp, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string something;
                    std::string strOut;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("something", something);
                        tarsAttr.getByDefault("strOut", strOut, strOut);
                    }
                    else
                    {
                        _is.read(something, 1, true);
                        _is.read(strOut, 2, false);
                    }
                    tars::Int32 _ret = saySomething(something,strOut, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("strOut", strOut);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(strOut, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                    }
                    else
                    {
                    }
                    tars::Int32 _ret = test(_current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string sReq;
                    std::string sRsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("sReq", sReq);
                        tarsAttr.getByDefault("sRsp", sRsp, sRsp);
                    }
                    else
                    {
                        _is.read(sReq, 1, true);
                        _is.read(sRsp, 2, false);
                    }
                    tars::Int32 _ret = testHello(sReq,sRsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("sRsp", sRsp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(sRsp, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::Int32 iIn;
                    tars::Int32 iOut;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("iIn", iIn);
                        tarsAttr.getByDefault("iOut", iOut, iOut);
                    }
                    else
                    {
                        _is.read(iIn, 1, true);
                        _is.read(iOut, 2, false);
                    }
                    tars::Int32 _ret = testInt(iIn,iOut, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("iOut", iOut);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(iOut, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
